#version 450

#include <libgpu/vulkan/vk/common.vk>

#include "defines.h"

layout (local_size_x = VK_GROUP_SIZE) in;

layout (std430, binding = 0) readonly buffer AsIn {
	uint as[];
};

layout (std430, binding = 1) readonly buffer BsIn {
	uint bs[];
};

layout (std430, binding = 2) writeonly buffer CsOut {
	uint cs[];
};

layout (push_constant) uniform PushConstants {
	uint n;
	vec3 tmp;
} params;

void main()
{
	const uint i = gl_GlobalInvocationID.x;
	if (i < params.n) {
		rassert(as[i] == 3 * (i + 5) + 7, 160682132);
		rassert(bs[i] == 11 * (i + 13) + 17, 160682133);
		cs[i] = as[i] + bs[i];

		if (i == 0) {
			// Note that debugPrintfEXT is enabled automatically for Debug build
			// and is disabled for Release build (via empty macros),
			// but it can be enabled for local dev purposes for Release build too in common.vk
			// (note that common.vk also already declared this line: #extension GL_EXT_debug_printf : enable)
			// (so you don't need to declare it in your kernels)
			// Note that validation layers should be enabled for debugPrintfEXT to work:
			// - enable via tweak: main/vk_validation_layers=True
			// - install validation layers (see Ctrl+F("validation_layers") in configure-ubuntu.sh)
			// - add env variable VK_LAYER_PATH=/usr/local/share/vulkan/explicit_layer.d/
#if DEBUG_PRINTF_EXT_ENABLED
			debugPrintfEXT("Hello world! debugPrintfEXT works! i=%d as[i]+bs[i]=%d+%d=%d\n", i, as[i], bs[i], as[i] + bs[i]);
#endif
		}
	}
}
